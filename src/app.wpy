<style lang="less">
    .container {
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: space-between;
      box-sizing: border-box;
    }
</style>
<script>
import wepy from 'wepy'
import 'wepy-async-function'

import { setStore } from 'wepy-redux'
import configStore from './store'
import OAuth from './assets/js/OAuth'

const store = configStore()
setStore(store)

export default class extends wepy.app {
    config = {
        pages: [
            'pages/mycenter/index',
            'pages/reserve/index',
            'pages/mall/index'
        ],
        window: {
            backgroundTextStyle: 'light',
            navigationBarBackgroundColor: '#fff',
            navigationBarTitleText: 'WeChat',
            navigationBarTextStyle: 'black'
        },
        tabBar: {
            color: "#AAAAAA",
            selectedColor: "#1cc466",
            list: [{
                pagePath: 'pages/reserve/index',
                iconPath: 'assets/image/icon_component.png',
                selectedIconPath: 'assets/image/icon_component_HL.png',
                text: '预约'
            }, {
                pagePath: 'pages/mall/index',
                iconPath: 'assets/image/icon_API.png',
                selectedIconPath: 'assets/image/icon_API_HL.png',
                text: '商城'
            }, {
                pagePath: 'pages/mycenter/index',
                iconPath: 'assets/image/icon_API.png',
                selectedIconPath: 'assets/image/icon_API_HL.png',
                text: '我的'
            }]
        }
    }
    globalData = {}

    // 全局请求拦截器
    constructor() {
        super()//将指针指向app
        this.use('requestfix')//处理并发
        this.use('promisify');//使用promise

        // 请求拦截
        this.intercept('request', {
            config(config) {
                // 设置请求url前缀
                config.url = 'http://192.168.2.143:3000' + config.url;
                config.timestamp = +new Date();
                // 请求头带上Storage中的Authentication
                const udata = wx.getStorageSync('userInfo');
                config.header = {
                    Authentication: udata.Authentication || ''
                };
                wx.showLoading({
                    mask: true,
                    title: '加载中',
                })
                return config;
            },
            success(response) {
                if (response.statusCode && response.statusCode == 200) {
                    return response.data
                } else {
                    // session过期
                    if (response.statusCode == 420420) {
                        self.$parent.getUserData(true);
                    } else {
                        wx.showToast({
                            title: '服务器异常:' + response.statusCode,
                            icon: 'error',
                            duration: 2000
                        });
                    }
                }
            },
            fail(response) {
                wx.showToast({
                    title: '服务器异常',
                    icon: 'error',
                    duration: 2000
                });
            },
            complete(response) {
                wx.hideLoading()
            }
        })
    }

    async onLaunch(options) {
        console.log(options);
        const self = this;
        // 进入小程序判断是否允许授权
        // 若未授权 弹框提示
        wx.getSetting({
            success(res) {
                if (!res.authSetting['scope.record']) {
                    wx.authorize({
                        scope: 'scope.record',
                        success(rtn) {
                            console.log(rtn);
                            // 用户已同意授权 获取用户信息
                        }
                    })
                } else {
                    // 用户已同意过授权
                    console.log('用户已同意过授权');
                }
            }
        })
    }

    ohShow() {
        const self = this;
        wx.checkSession({
            success: function () {
                console.log(1);
                //session_key 未过期
            },
            fail: function () {
                console.log(2);
                // session_key 已经失效 需要重新执行登录流程
                // OAuth.decryptUserInfo().then((response) => {
                //     wx.setStorageSync('userInfo', response.data);
                //     return response.data;
                // });
            }
        })
    }
    // 主页放置获取用户信息的方法  子页需要的时候调用
    // forceRequest是否强制发送请求获取(当子页面request返回session过期 重新登录使用 登录完成后子页面重新执行onload)
    // 子页面应尽量避免onload时发送多个异步请求 防止session过期零界点异常
    getUserData(forceRequest = false) {
        const self = this;
        return new Promise((resolve, reject) => {
            try {
                // 先读取本地 如果有直接返回 否则发送请求获取
                var udata = wx.getStorageSync('userInfo');
                if (udata) {
                    resolve(udata);
                } else {
                    OAuth.decryptUserInfo().then((response) => {
                        wx.setStorageSync('userInfo', response.data);
                        resolve(response.data);
                    });
                }
            } catch (e) {
                OAuth.decryptUserInfo().then((response) => {
                    wx.setStorageSync('userInfo', response.data);
                    resolve(response.data);
                });
            }

        })
    }
    queryWXuser(phone) {
        return wepy.request({
            url: '/WXClass/queryWXuser',
            method: 'GET',
            data: {
                phone: phone
            }
        }).then((response) => {
            console.log(response);
        })
    }
}
</script>
